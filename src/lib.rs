mod error;

pub use error::{LambertW0Error, LambertWm1Error, LambertWm1ErrorReason};

// -1/e
const Z0: f64 = -0.367_879_441_171_442_33;

// 1/sqrt(e)
const X0: f64 = 0.606_530_659_712_633_4;

/// The principal branch of the Lambert W function, W_0(`z`).
///
/// Computed to 50 bits of accuracy by the [method of Toshio Fukushima](https://www.researchgate.net/publication/346309410_Precise_and_fast_computation_of_Lambert_W_function_by_piecewise_minimax_rational_function_approximation_with_variable_transformation).
///
/// # Errors
///
/// Returns an error if `z` < -1/e.
pub fn lambert_w0_50(z: f64) -> Result<f64, LambertW0Error> {
    dw0c(z - Z0)
}

/// The secondary branch of the Lambert W function, W_-1(`z`).
///
/// Computed to 50 bits of accuracy by the [method of Toshio Fukushima](https://www.researchgate.net/publication/346309410_Precise_and_fast_computation_of_Lambert_W_function_by_piecewise_minimax_rational_function_approximation_with_variable_transformation).
///
/// # Errors
///
/// Returns an error if `z` is positive or if `z` < -1/e.
pub fn lambert_wm1_50(z: f64) -> Result<f64, LambertWm1Error> {
    dwm1c(z, z - Z0)
}

/// The principal branch of the Lambert W function, W_0(`z`).
///
/// Computed to 24 bits of accuracy by the [method of Toshio Fukushima](https://www.researchgate.net/publication/346309410_Precise_and_fast_computation_of_Lambert_W_function_by_piecewise_minimax_rational_function_approximation_with_variable_transformation).
///
/// # Errors
///
/// Returns an error if `z` < -1/e.
pub fn lambert_w0_24(z: f64) -> Result<f64, LambertW0Error> {
    sw0(z)
}

/// The secondary branch of the Lambert W function, W_0(`z`).
///
/// Computed to 24 bits of accuracy by the [method of Toshio Fukushima](https://www.researchgate.net/publication/346309410_Precise_and_fast_computation_of_Lambert_W_function_by_piecewise_minimax_rational_function_approximation_with_variable_transformation).
///
/// # Errors
///
/// Returns an error if `z` < -1/e.
pub fn lambert_wm1_24(z: f64) -> Result<f64, LambertWm1Error> {
    swm1(z)
}

/// 24-bit accuracy computation of principal branch of Lambert W function, W_0(z),
/// by piecewise minimax rational function approximation
///
/// Created by T. Fukushima <Toshio.Fukushima@nao.ac.jp>,
/// ported to Rust by Johanna Sörngård <jsorngard@gmail.com>
///
/// Reference: T. Fukushima (2020) to be submitted
///  "Precise and fast computation of Lambert W-functions by piecewise
///   rational function approximation with variable transformation"
fn sw0(z: f64) -> Result<f64, LambertW0Error> {
    if z < Z0 {
        Err(LambertW0Error::new())
    } else if z <= 2.0082178115844726563 {
        // W <= 0.854, X_1
        let x = (z - Z0).sqrt();
        Ok((-0.9999999403954018833
            + x * (0.05573005216177780273
                + x * (2.1269732491053174421
                    + x * (0.8135112367835287880 + x * (0.016324880146070158165)))))
            / (1.
                + x * (2.2759065598634651182
                    + x * (1.3675970138689040829 + x * (0.18615823452831621870)))))
    } else if z <= 30.539142109510895244 {
        // W <= 2.502, X_2
        let x = (z - Z0).sqrt();
        Ok((-0.98551970905999093351
            + x * (1.0774975733813516259
                + x * (0.87175103068177496565 + x * (0.054352728608275766374))))
            / (1.
                + x * (1.1861014037015433637
                    + x * (0.24996298430828162221 + x * (0.0068813686486759124002)))))
    } else if z <= 371.66984371375776070 {
        // W <= 4.430, X_3
        let x = (z - Z0).sqrt();
        Ok((-0.76239711346368884239
            + x * (1.2317731613363595833
                + x * (0.24342447113056694510 + x * (0.0043206013938782355974))))
            / (1.
                + x * (0.57938621503586907609
                    + x * (0.046601427736078777155 + x * (0.00043512817567474109142)))))
    } else if z <= 4705.9189542659690377 {
        // W <= 6.574, X_4
        let x = (z - Z0).sqrt();
        Ok((0.085801247434391388025
            + x * (0.82539798099748343722
                + x * (0.039781960760329074310 + x * (0.00018785578927583799084))))
            / (1.
                + x * (0.21338076817080141022
                    + x * (0.0054626720397926935553 + x * (0.000015449534481294754830)))))
    } else if z <= 64640.797355310089675 {
        // W <= 8.892, X_5
        let x = (z - Z0).sqrt();
        Ok((1.6219245383470168742
            + x * (0.38869145132516663564
                + x * (0.0045750642678503511111 + x * (5.5384672148644498873e-6))))
            / (1.
                + x * (0.065219460735182414183
                    + x * (0.00047882760789022508940 + x * (3.8094828146292401099e-7)))))
    } else if z <= 965649.03087116322641 {
        // W <= 11.351, X_6
        let x = (z - Z0).sqrt();
        Ok((3.6218996085695919969
            + x * (0.14884646754880159869
                + x * (0.00042469622409998403146 + x * (1.2790179710374216846e-7))))
            / (1.
                + x * (0.017985659319608747571
                    + x * (0.000035446449757357845802 + x * (7.5062492963037047005e-9)))))
    } else if z <= 1.5593334228038165490e7 {
        // W <= 13.928, X_7
        let x = (z - Z0).sqrt();
        Ok((5.9073369739608090589
            + x * (0.050053653594737112977
                + x * (0.000034072148625204698714 + x * (2.4812064693655483492e-9))))
            / (1.
                + x * (0.0046558990016843210488
                    + x * (2.3449445860808812050e-6 + x * (1.2631429964808461140e-10)))))
    } else if z <= 2.7025640277241903157e8 {
        // W <= 16.605, X_8
        let x = (z - Z0).sqrt();
        Ok((8.3826005848195512671
            + x * (0.015360346475232500605
                + x * (2.4433384397869367445e-6 + x * (4.1856803264118549639e-11))))
            / (1.
                + x * (0.0011507423223785867830
                    + x * (1.4221428474813516408e-7 + x * (1.8739172026620122637e-12)))))
    } else if z <= 4.9950187397041946355e9 {
        // W <= 19.368, X_9
        let x = (z - Z0).sqrt();
        Ok((10.996674803992550975
            + x * (0.0043942138898673832456
                + x * (1.5966665354846778026e-7 + x * (6.2665382844968732242e-13))))
            / (1.
                + x * (0.00027383757675703647431
                    + x * (8.0157062319690304209e-9 + x * (2.4956982158871730002e-14)))))
    } else if z <= 9.7911154416726960277e10 {
        // W <= 22.207, X_10
        let x = (z - Z0).sqrt();
        Ok((13.719833802350861158
            + x * (0.0011874443805202291429
                + x * (9.6303381200164675971e-9 + x * (8.4434524232261628808e-15))))
            / (1.
                + x * (0.000063056372424395349289
                    + x * (4.2358766031098840291e-10 + x * (3.0205405005434474304e-16)))))
    } else if z <= 2.0259753856302099683e12 {
        // W <= 25.114, X_11
        let x = (z - Z0).sqrt();
        Ok((16.533119481561616886
            + x * (0.00030583125751908040646
                + x * (5.4112946633720098731e-10 + x * (1.0347130333704711275e-16))))
            / (1.
                + x * (0.000014099161212376339883
                    + x * (2.1121095412354695063e-11 + x * (3.3526927157452469515e-18)))))
    } else if z <= 4.4077444251477938939e13 {
        // W <= 28.082, X_12
        let x = (z - Z0).sqrt();
        Ok((19.423519260478579324
            + x * (0.000075559269761977808773
                + x * (2.8530023120783075984e-11 + x * (1.1629627096463579569e-18))))
            / (1.
                + x * (3.0692092789727855657e-6
                    + x * (9.9866613050311465475e-13 + x * (3.4376717116983915038e-20)))))
    } else if z <= 1.0048382150571504485e15 {
        // W <= 31.106, X_13
        let x = (z - Z0).sqrt();
        Ok((22.381576050041913103
            + x * (0.000017994724029162552053
                + x * (1.4194876420402230259e-12 + x * (1.2071105154385829867e-20))))
            / (1.
                + x * (6.5183962806656770340e-7
                    + x * (4.4958665712812536150e-14 + x * (3.2755429245023581532e-22)))))
    } else if z <= 2.3932552602359837687e16 {
        // W <= 34.182, X_14
        let x = (z - Z0).sqrt();
        Ok((25.400105417092068195
            + x * (4.1467378386579246015e-6
                + x * (6.6962697219681791539e-14 + x * (1.1637905159506476082e-22))))
            / (1.
                + x * (1.3529801357030416819e-7
                    + x * (1.9336081785325750353e-15 + x * (2.9149396199816257636e-24)))))
    } else if z <= 5.9397996597465754346e17 {
        // W <= 37.306, X_15
        let x = (z - Z0).sqrt();
        Ok((28.473455626379917708
            + x * (9.2746824693094059019e-7
                + x * (3.0068990159336805287e-15 + x * (1.0473557591822027852e-24))))
            / (1.
                + x * (2.7486489704521729110e-8
                    + x * (7.9678987071036133398e-17 + x * (2.4331666367061529366e-26)))))
    } else if z <= 1.5326938589901766592e19 {
        // W <= 40.475, X_16
        let x = (z - Z0).sqrt();
        Ok((31.597055437846359378
            + x * (2.0184225276786325496e-7
                + x * (1.2895788196512908898e-16 + x * (8.8361174714101098159e-27))))
            / (1.
                + x * (5.4723945126098497202e-9
                    + x * (3.1537729179929191758e-18 + x * (1.9122035132571670022e-28)))))
    } else if z <= 4.1035659398885394135e20 {
        // W <= 43.687, X_17
        let x = (z - Z0).sqrt();
        Ok((34.767124490414517175
            + x * (4.2830799240698942932e-8
                + x * (5.2975884121036534407e-18 + x * (7.0145515392158775378e-29))))
            / (1.
                + x * (1.0689301127696332436e-9
                    + x * (1.2016699061789422951e-19 + x * (1.4195244810800985235e-30)))))
    } else if z <= 2.1723706610490604317e141 {
        // W <= 319.673, U_18
        let y = z.ln();
        Ok((-0.60702373371846192476
            + y * (0.69828716322526983651
                + y * (0.075795135081824754660 + y * (0.00051669256081737246814))))
            / (1.
                + y * (0.079048429972306018289
                    + y * (0.00051760990899205978468 + y * (-4.2438403931981069786e-10)))))
    } else {
        //    U_19
        let y = z.ln();
        Ok((-3.1320056028863661192
            + y * (0.94889465726532600902
                + y * (0.0083178152961644393217 + y * (5.5587848157833492890e-6))))
            / (1.
                + y * (0.0083656818677730058769
                    + y * (5.5597154935973275364e-6 + y * (-3.7481535833151202222e-14)))))
    }
}

/// 24-bit accuracy computation of secondary branch of Lambert W function, W_-1(z),
/// defined as the solution of nonlinear equation, W exp(W) = z, when W < -1
/// by piecewise minimax rational function approximation
///
/// Created by T. Fukushima <Toshio.Fukushima@nao.ac.jp>,
/// ported to Rust by Johanna Sörngård <jsorngard@gmail.com>
///
/// Reference: T. Fukushima (2020) to be submitted
///  "Precise and fast computation of Lambert W-functions by piecewise
///   rational function approximation with variable transformation"
fn swm1(z: f64) -> Result<f64, LambertWm1Error> {
    if z < Z0 {
        Err(LambertWm1Error::new(
            LambertWm1ErrorReason::ArgumentOutOfRange,
        ))
    } else if z <= -0.20729377764038413899 {
        // W >= -2.483, Y_-1
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-6.3837228228019056402
            + x * (-74.968653259594050421
                + x * (-19.714821552432482711 + x * (70.677326667809236886))))
            / (1.
                + x * (24.295836951878692244
                    + x * (64.112460611386039710 + x * (17.994497369039313585)))))
    } else if z <= -0.071507705083841949275 {
        // W >= -4.032, Y_-2
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-7.7233284812299780445
            + x * (-352.48469097042914866
                + x * (-1242.0088903685677154 + x * (1171.6475960620499033))))
            / (1.
                + x * (77.681242588997413555
                    + x * (648.56431214075246023 + x * (566.70154976436164818)))))
    } else if z <= -0.020704412621717479786 {
        // W >= -5.600, Y_-3
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-9.1377731417581546262
            + x * (-1644.7244791508889407
                + x * (-28105.096098779681470 + x * (3896.0798103909213915))))
            / (1.
                + x * (272.37526135123973261
                    + x * (7929.2242612913497363 + x * (23980.122860821312510)))))
    } else if z <= -0.0054800129452094435733 {
        // W >= -7.178, Y_-4
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-10.603388239566372960
            + x * (-7733.3485214986476193
                + x * (-575482.40707964422174 + x * (-2.1545526041889783132e6))))
            / (1.
                + x * (1021.7938566066817287
                    + x * (111300.22915486520918 + x * (1.2614256400088442186e6)))))
    } else if z <= -0.0013674669892508042687 {
        // W >= -8.766, Y_-5
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-12.108699273343437997
            + x * (-36896.535108166377289
                + x * (-1.1831126720106053574e7 + x * (-2.7565830813940924286e8))))
            / (1.
                + x * (4044.9753064880700697
                    + x * (1.7418277619030004713e6 + x * (7.8436907380806897280e7)))))
    } else if z <= -0.00032614226731072565915 {
        // W >= -10.367, Y_-6
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-13.646761936746191398
            + x * (-179086.11585715148553
                + x * (-2.5084634935214641020e8 + x * (-2.9343700494833715019e10))))
            / (1.
                + x * (16743.826607737142476
                    + x * (2.9809650946011743047e7 + x * (5.5739514816958001202e9)))))
    } else if z <= -0.000074906612036101435088 {
        // W >= -11.983, Y_-7
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-15.212958142001646273
            + x * (-884954.68798168953807
                + x * (-5.5298154378633475379e9 + x * (-3.0934187435314668203e12))))
            / (1.
                + x * (72009.255525210120244
                    + x * (5.5059007671875803470e8 + x * (4.4324894867000340495e11)))))
    } else if z <= -1.0962444526410993919e-19 {
        // W >= -47.518, V_-8
        let u = (-z).ln();
        Ok((-0.032401163177791086145
            + u * (2.0281942144742502667
                + u * (-0.52752431242592713992 + u * (0.017340294772717582230))))
            / (1.
                + u * (-0.45004274443891737296
                    + u * (0.017154705753566296216 + u * (-5.2438196202718358226e-7)))))
    } else if z <= -2.5096099299945901455e-136 {
        // W >= -317.993, V_-9
        let u = (-z).ln();
        Ok((-1.4411246595812098029
            + u * (1.2819269639980478095
                + u * (-0.074979356113812324952 + u * (0.00047636309162069150655))))
            / (1.
                + u * (-0.072000873723868650424
                    + u * (0.00047548932989597029952 + u * (-4.1714979247546840619e-10)))))
    } else if z < 0.0 {
        // V_-10
        let u = (-z).ln();
        Ok((-3.3108760911710447554
            + u * (1.0500678809935174775
                + u * (-0.0082367495821343204940 + u * (5.5289561594910188441e-6))))
            / (1.
                + u * (-0.0081892727433315511867
                    + u * (5.5280076009711954032e-6 + u * (-3.9222773084574060594e-14)))))
    } else {
        Err(LambertWm1Error::new(
            LambertWm1ErrorReason::PositiveArgument,
        ))
    }
}

/// 50-bit accuracy computation of principal branch of Lambert W function, W_0(z),
/// by piecewise minimax rational function approximation
///
/// NOTICE: Input arguement is NOT z but its complement defined as zc = z+1/e
///
/// Created by T. Fukushima <Toshio.Fukushima@nao.ac.jp>,
/// ported to Rust by Johanna Sörngård <jsorngard@gmail.com>
///
/// Reference: T. Fukushima (2020) to be submitted
///  "Precise and fast computation of Lambert W-functions by piecewise
///   rational function approximation with variable transformation"
#[rustfmt::skip]
fn dw0c(zc: f64) -> Result<f64, LambertW0Error> {
    if zc < 0.0 {
        Err(LambertW0Error::new())
    } else if zc <= 2.549_893_906_503_473_6 {
        // W <= 0.893, X_1
        let x = zc.sqrt();
        Ok((-0.999_999_999_999_999_9
            + x * (-2.739_966_866_820_366
                + x * (0.026_164_207_726_990_4
                    + x * (6.370_916_807_894_901
                        + x * (7.101_328_651_785_403
                            + x * (2.980_082_678_300_685_3
                                + x * (0.488_195_968_137_898_7
                                    + x * (0.023_753_035_787_333_61
                                        + x * 0.000_077_365_760_093_772_43))))))))
            / (1.
                + x * (5.071_610_848_417_428
                    + x * (9.986_838_818_354_528
                        + x * (9.660_755_192_207_887
                            + x * (4.794_372_899_133_612
                                + x * (1.162_970_347_770_452_3
                                    + x * (0.118_494_625_007_337_55
                                        + x * 0.003_432_652_513_240_222_5))))))))
    } else if zc <= 43.613_924_462_669_37 {
        // W <= 2.754, X_2
        let x = zc.sqrt();
        Ok((-0.999_978_018_005_789_1
            + x * (-0.704_157_515_904_836
                + x * (2.123_226_083_280_252_8
                    + x * (2.389_676_070_293_572
                        + x * (0.777_653_118_050_291_8
                            + x * (0.089_686_698_993_644_75
                                + x * (0.003_306_248_575_374_64
                                    + x * 0.000_025_106_760_479_132_852)))))))
            / (1.
                + x * (3.035_602_682_808_541
                    + x * (3.143_453_015_128_678
                        + x * (1.372_315_656_659_244_7
                            + x * (0.258_446_974_157_442_1
                                + x * (0.019_551_162_251_819_045
                                    + x * (0.000_487_759_332_445_301_26
                                        + x * 2.316_511_684_107_315_5e-6))))))))
    } else if zc <= 598.453_533_718_782_8 {
        // W <= 4.821, X_3
        let x = zc.sqrt();
        Ok((-0.989_674_203_372_735
            + x * (0.595_876_806_063_943_8
                + x * (1.422_508_301_815_194_3
                    + x * (0.448_828_891_683_238_1
                        + x * (0.044_504_943_332_390_03
                            + x * (0.001_521_879_483_541_957_8
                                + x * (0.000_016_072_263_556_502_22
                                    + x * 3.372_337_302_030_651e-8)))))))
            / (1.
                + x * (1.695_940_239_462_619_7
                    + x * (0.809_685_734_155_009
                        + x * (0.140_020_349_998_170_23
                            + x * (0.009_357_187_849_379_016
                                + x * (0.000_232_514_875_933_897_72
                                    + x * (1.806_017_075_150_299e-6
                                        + x * 2.575_066_733_701_592_3e-9))))))))
    } else if zc <= 8_049.491_985_075_761_5 {
        // W <= 7.041, X_4
        let x = zc.sqrt();
        Ok((-0.773_164_919_972_062_3
            + x * (1.139_133_350_429_670_3
                + x * (0.431_161_172_552_170_74
                    + x * (0.035_773_078_319_037_505
                        + x * (0.000_964_416_405_805_590_9
                            + x * (8.972_385_459_867_587e-6
                                + x * (2.562_350_314_411_772_5e-8
                                    + x * 1.434_881_377_841_663_1e-11)))))))
            / (1.
                + x * (0.746_572_874_565_144_2
                    + x * (0.126_297_770_334_193_5
                        + x * (0.006_974_151_295_956_318
                            + x * (0.000_140_893_392_443_553_55
                                + x * (1.025_743_288_315_294_3e-6
                                    + x * (2.290_268_719_011_923e-9
                                        + x * 9.279_423_101_326_45e-13))))))))
    } else if zc <= 111_124.954_121_217_82 {
        // W <= 9.380, X_5
        let x = zc.sqrt();
        Ok((0.120_071_016_715_536_88
            + x * (0.833_526_408_299_128_3
                + x * (0.070_142_775_916_948_34
                    + x * (0.001_484_635_798_547_512_4
                        + x * (0.000_010_478_757_366_110_155
                            + x * (2.571_589_298_707_103_7e-8
                                + x * (1.938_421_447_960_647_4e-11
                                    + x * 2.844_704_903_913_941e-15)))))))
            / (1.
                + x * (0.253_967_388_456_191_27
                    + x * (0.012_839_238_907_330_318
                        + x * (0.000_202_753_756_325_109_98
                            + x * (1.148_295_607_344_914e-6
                                + x * (2.318_837_060_567_426_4e-9
                                    + x * (1.427_199_416_574_256_4e-12
                                        + x * 1.588_483_694_239_479_6e-16))))))))
    } else if zc <= 1.587_042_981_208_229_7e6 {
        // W <= 11.809, X_6
        let x = zc.sqrt();
        Ok((1.722_110_443_993_771_1
            + x * (0.399_195_942_864_842_8
                + x * (0.007_988_554_014_068_503
                    + x * (0.000_042_889_742_253_257_923
                        + x * (7.814_682_818_052_987e-8
                            + x * (4.981_963_876_435_468e-11
                                + x * (9.765_088_971_426_53e-15
                                    + x * 3.705_299_728_172_172_6e-19)))))))
            / (1.
                + x * (0.074_007_438_118_020_55
                    + x * (0.001_033_350_150_669_774_1
                        + x * (4.436_085_803_572_751e-6
                            + x * (6.782_291_231_637_104e-9
                                + x * (3.683_435_670_763_949e-12
                                    + x * (6.083_615_956_026_604e-16
                                        + x * 1.814_986_933_598_122_7e-20))))))))
    } else if zc <= 2.341_470_840_187_546e7 {
        // W <= 14.308, X_7
        let x = zc.sqrt();
        Ok((3.752_931_402_343_454_3
            + x * (0.154_913_426_903_578_07
                + x * (0.000_756_631_406_759_007_9
                    + x * (1.027_160_923_596_997_8e-6
                        + x * (4.785_324_767_593_006e-10
                            + x * (7.832_804_077_027_547e-14
                                + x * (3.943_303_375_839_104e-18
                                    + x * 3.823_286_220_566_028_6e-23)))))))
            / (1.
                + x * (0.020_112_985_338_854_444
                    + x * (0.000_074_712_286_154_830_14
                        + x * (8.480_059_800_369_383e-8
                            + x * (3.418_242_413_037_691_4e-11
                                + x * (4.886_625_913_969_095_5e-15
                                    + x * (2.122_337_362_683_463_5e-19
                                        + x * 1.664_298_567_126_058_3e-24))))))))
    } else if zc <= 3.557_647_430_800_996_4e8 {
        // W <= 16.865, X_8
        let x = zc.sqrt();
        Ok((6.019_654_205_560_656
            + x * (0.053_496_672_841_797_86
                + x * (0.000_064_340_849_275_316_5
                    + x * (2.196_909_010_009_596_7e-8
                        + x * (2.592_798_893_703_306_3e-12
                            + x * (1.077_919_816_180_152_7e-16
                                + x * (1.378_042_409_101_789_9e-21
                                    + x * 3.376_897_315_074_255e-27)))))))
            / (1.
                + x * (0.005_280_968_370_423_337_4
                    + x * (5.102_050_121_938_956e-6
                        + x * (1.501_831_229_227_083_1e-9
                            + x * (1.567_770_663_641_318_8e-13
                                + x * (5.799_204_123_891_188e-18
                                    + x * (6.513_317_077_032_078e-23
                                        + x * 1.320_508_013_921_340_6e-28))))))))
    } else if zc <= 5.550_171_629_616_363e9 {
        // W <= 19.468, X_9
        let x = zc.sqrt();
        Ok((8.428_026_850_098_97
            + x * (0.017_155_758_546_279_713
                + x * (5.083_662_066_982_932e-6
                    + x * (4.335_490_369_183_258_4e-10
                        + x * (1.284_101_714_564_558_3e-14
                            + x * (1.341_910_676_974_588_6e-19
                                + x * (4.310_169_845_549_223e-25
                                    + x * 2.642_243_342_208_819e-31)))))))
            / (1.
                + x * (0.001_357_200_675_459_530_1
                    + x * (3.353_524_348_142_62e-7
                        + x * (2.520_696_924_642_126_4e-11
                            + x * (6.713_622_627_306_053e-16
                                + x * (6.332_422_668_085_468_6e-21
                                    + x * (1.812_816_740_001_377_6e-26
                                        + x * 9.366_203_005_813_68e-33))))))))
    } else if zc <= 8.867_470_483_965_778e10 {
        // W <= 22.112, X_10
        let x = zc.sqrt();
        Ok((10.931_063_230_472_498
            + x * (0.005_222_423_454_024_553_5
                + x * (3.799_610_571_181_013e-7
                    + x * (8.030_579_353_341_036e-12
                        + x * (5.913_978_562_709_06e-17
                            + x * (1.538_202_035_953_303e-22
                                + x * (1.228_894_412_626_811e-28
                                    + x * 1.866_508_927_066_012_3e-35)))))))
            / (1.
                + x * (0.000_343_287_025_511_975_8
                    + x * (2.139_535_151_853_884_3e-8
                        + x * (4.052_417_018_663_159_3e-13
                            + x * (2.718_142_431_533_571e-18
                                + x * (6.453_898_663_835_549e-24
                                    + x * (4.649_461_378_588_898_6e-30
                                        + x * 6.044_202_436_729_939e-37))))))))
    } else if zc <= 1.447_779_186_527_290_3e12 {
        // W <= 24.791, X_11
        let x = zc.sqrt();
        Ok((13.502_943_080_893_871
            + x * (0.001_528_463_650_634_626_6
                + x * (2.715_696_735_826_234_5e-8
                    + x * (1.411_039_405_124_216_2e-13
                        + x * (2.560_573_431_121_973e-19
                            + x * (1.642_129_372_442_533_8e-25
                                + x * (3.232_494_469_143_584e-32
                                    + x * 1.205_466_264_125_178_3e-39)))))))
            / (1.
                + x * (0.000_085_701_512_879_089_46
                    + x * (1.331_124_443_575_269_2e-9
                        + x * (6.278_892_444_038_535e-15
                            + x * (1.048_378_815_225_220_4e-20
                                + x * (6.194_349_996_624_916e-27
                                    + x * (1.110_156_786_034_091_8e-33
                                        + x * 3.589_738_112_830_896_4e-41))))))))
    } else if zc <= 2.411_145_863_251_185e13 {
        // W <= 27.500, X_12
        let x = zc.sqrt();
        Ok((16.128_076_167_439_016
            + x * (0.000_433_603_851_764_670_7
                + x * (1.869_640_387_182_092e-9
                    + x * (2.369_179_576_690_148_7e-15
                        + x * (1.050_319_182_696_315_4e-21
                            + x * (1.646_192_757_360_676_3e-28
                                + x * (7.913_827_608_347_452e-36
                                    + x * 7.184_589_034_370_167e-44)))))))
            / (1.
                + x * (0.000_021_154_255_263_102_94
                    + x * (8.100_611_544_232_328e-11
                        + x * (9.415_598_602_216_99e-17
                            + x * (3.872_512_790_229_53e-23
                                + x * (5.634_465_111_557_057e-30
                                    + x * (2.486_095_108_421_003e-37
                                        + x * 1.978_830_473_742_778_7e-45))))))))
    } else if zc <= 4.089_703_644_260_084_4e14 {
        // W <= 30.236, X_13
        let x = zc.sqrt();
        Ok((18.796_301_105_534_486
            + x * (0.000_119_894_433_396_464_69
                + x * (1.246_337_752_867_686_3e-10
                    + x * (3.821_945_685_801_037e-17
                        + x * (4.105_569_393_025_208e-24
                            + x * (1.559_523_145_604_846_4e-31
                                + x * (1.815_717_355_307_799e-39
                                    + x * 3.980_799_776_432_617e-48)))))))
            / (1.
                + x * (5.169_103_198_835_992e-6
                    + x * (4.832_557_182_331_371e-12
                        + x * (1.370_788_874_691_692_8e-18
                            + x * (1.375_456_085_002_448e-25
                                + x * (4.881_188_297_566_18e-33
                                    + x * (5.251_864_182_817_021e-41
                                        + x * 1.019_211_959_313_475_6e-49))))))))
    } else if zc <= 7.055_590_147_678_997e15 {
        // W <= 32.996, X_14
        let x = zc.sqrt();
        Ok((21.500_582_830_667_334
            + x * (0.000_032_441_943_237_735_277
                + x * (8.076_496_341_683_755e-12
                    + x * (5.948_844_550_612_289e-19
                        + x * (1.536_410_618_721_586e-26
                            + x * (1.403_323_129_700_238_7e-34
                                + x * (3.925_987_271_230_577e-43
                                    + x * 2.062_908_638_225_773_6e-52)))))))
            / (1.
                + x * (1.251_531_764_243_385e-6
                    + x * (2.831_031_421_481_707e-13
                        + x * (1.942_366_641_612_364e-20
                            + x * (4.712_861_600_415_736e-28
                                + x * (4.043_334_739_183_994_4e-36
                                    + x * (1.051_514_144_383_118_8e-44
                                        + x * 4.931_649_093_543_692_6e-54))))))))
    } else if zc <= 1.236_660_755_797_672_8e17 {
        // W <= 35.779, X_15
        let x = zc.sqrt();
        Ok((24.235_812_532_416_976
            + x * (8.616_150_599_577_68e-6
                + x * (5.103_343_156_186_827e-13
                    + x * (8.964_239_366_584_964e-21
                        + x * (5.525_436_418_109_742e-29
                            + x * (1.204_507_272_405_060_6e-37
                                + x * (8.037_299_717_652_684e-47
                                    + x * 1.004_914_081_214_649_3e-56)))))))
            / (1.
                + x * (3.004_676_184_474_948e-7
                    + x * (1.630_910_427_085_546_4e-14
                        + x * (2.684_227_103_029_893e-22
                            + x * (1.561_967_263_245_888_1e-30
                                + x * (3.213_168_903_039_798_6e-39
                                    + x * (2.003_239_624_530_768_4e-48
                                        + x * 2.252_027_455_467_633e-58))))))))
    } else if zc <= 2.199_937_348_793_1e18 {
        // W <= 38.582, X_16
        let x = zc.sqrt();
        Ok((26.998_134_347_987_44
            + x * (2.251_225_776_757_228_4e-6
                + x * (3.152_123_075_986_696_7e-14
                    + x * (1.311_403_571_979_063e-22
                        + x * (1.915_678_403_396_236_5e-31
                            + x * (9.896_700_305_344_48e-41
                                + x * (1.564_042_389_844_843_4e-50
                                    + x * 4.621_619_304_066_487e-61)))))))
            / (1.
                + x * (7.157_267_637_090_758e-8
                    + x * (9.250_050_609_111_575e-16
                        + x * (3.623_981_958_278_757_5e-24
                            + x * (5.018_771_249_380_042e-33
                                + x * (2.456_586_198_821_807e-42
                                    + x * (3.643_565_843_399_166e-52
                                        + x * 9.743_249_064_015_534e-63))))))))
    } else if zc <= 3.968_539_219_834_401_6e19 {
        // W <= 41.404, X_17
        let x = zc.sqrt();
        Ok((29.784_546_702_831_97
            + x * (5.797_176_439_217_133e-7
                + x * (1.906_987_279_260_195e-15
                    + x * (1.866_870_087_085_876_3e-24
                        + x * (6.420_051_095_337_094e-34
                            + x * (7.807_662_465_081_897e-44
                                + x * (2.902_963_869_695_631_7e-54
                                    + x * 2.014_187_045_856_618e-65)))))))
            / (1.
                + x * (1.692_446_318_046_970_5e-8
                    + x * (5.170_393_431_125_454e-17
                        + x * (4.787_153_272_156_007e-26
                            + x * (1.566_440_583_254_515e-35
                                + x * (1.811_313_798_238_133_2e-45
                                    + x * (6.345_415_028_949_542e-56
                                        + x * 4.007_296_402_524_44e-67))))))))
    } else if zc <= 1.412_707_514_527_465_2e104 {
        // W <= 234.358, U_18
        let y = zc.ln();
        Ok((0.744_134_994_601_267_8
            + y * (0.414_032_436_180_059_14
                + y * (0.260_125_641_667_734_16
                    + y * (0.021_450_457_095_960_294
                        + y * (0.000_518_723_772_647_059_1
                            + y * (4.357_469_356_831_998e-6
                                + y * (1.236_306_605_892_170_7e-8
                                    + y * 9.019_414_776_630_996e-12)))))))
            / (1.
                + y * (0.334_878_110_674_670_1
                    + y * (0.023_756_834_394_570_627
                        + y * (0.000_542_256_330_089_077_3
                            + y * (4.437_898_005_257_962e-6
                                + y * (1.243_658_549_766_81e-8
                                    + y * (9.022_582_586_763_186e-12
                                        + y * (-4.205_783_627_010_972e-19)))))))))
    } else {
        //   U_19
        let y = zc.ln();
        Ok((-0.615_144_128_127_297_6
            + y * (0.679_793_101_336_309_3
                + y * (0.089_685_353_704_585_82
                    + y * (0.001_564_494_148_398_938
                        + y * (7.734_990_187_817_636e-6
                            + y * (1.289_164_754_669_943_5e-8
                                + y * (7.089_032_598_897_381_6e-12
                                    + y * 9.841_979_033_427_972e-16)))))))
            / (1.
                + y * (0.097_300_263_710_401_44
                    + y * (0.001_610_367_274_844_206
                        + y * (7.824_774_100_307_7e-6
                            + y * (1.294_926_130_897_134_6e-8
                                + y * (7.098_691_121_934_283e-12
                                    + y * (9.842_628_504_222_704e-16
                                        + y * (-1.596_014_725_260_605_6e-24)))))))))
    }
}

/// 50-bit accuracy computation of secondary branch of Lambert W function, W_-1(z),
/// by piecewise minimax rational function approximation
///
/// NOTICE: Required are two input arguements z and its complement defined as zc = z+1/e
///
/// Created by T. Fukushima <Toshio.Fukushima@nao.ac.jp>,
/// ported to Rust by Johanna Sörngård
///
/// Reference: T. Fukushima (2020) to be submitted
///  "Precise and fast computation of Lambert W-functions by piecewise
///   rational function approximation with variable transformation"
#[rustfmt::skip]
fn dwm1c(z: f64, zc: f64) -> Result<f64, LambertWm1Error> {
    if zc < 0.0 {
        Err(LambertWm1Error::new(
            LambertWm1ErrorReason::ArgumentOutOfRange,
        ))
    } else if z <= -0.3542913309442164 {
        // W >= -1.3, X_-1
        let x = zc.sqrt();
        Ok((-1.0000000000000001110
            + x * (4.296_301_617_877_713
                + x * (-4.099_140_792_400_746
                    + x * (-6.844_284_220_083_331
                        + x * (17.084_773_793_345_27
                            + x * (-13.015_133_123_886_661
                                + x * (3.930_360_862_953_985
                                    + x * (-0.346_367_465_122_474_57))))))))
            / (1.
                + x * (-6.627_945_599_474_763
                    + x * (17.740_962_374_121_4
                        + x * (-24.446_872_319_343_477
                            + x * (18.249_006_287_190_618
                                + x * (-7.058_075_875_662_479
                                    + x * (1.197_878_676_279_400_3
                                        + x * (-0.053_875_778_140_352_6)))))))))
    } else if z <= -0.188_726_882_822_894_35 {
        // W >= -2.637, Y_-1
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-8.225_315_526_444_685
            + x * (-813.207_067_320_014_9
                + x * (-15_270.113_237_678_51
                    + x * (-79_971.585_089_674_15
                        + x * (-103_667.542_158_083_77
                            + x * (42_284.755_505_061_26
                                + x * (74_953.525_397_605_48 + x * 10_554.369_146_366_736)))))))
            / (1.
                + x * (146.363_151_616_695_7
                    + x * (3_912.476_137_253_924
                        + x * (31_912.693_749_754_846
                            + x * (92_441.293_717_108_62
                                + x * (94_918.733_120_470_35
                                    + x * (29_531.165_406_571_745
                                        + x * 1_641.680_896_033_037))))))))
    } else if z <= -0.060_497_597_226_958_34 {
        // W >= -4.253, Y_-2
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-9.618_412_744_335_403
            + x * (-3_557.856_904_301_800_6
                + x * (-254_015.593_112_843_8
                    + x * (-5.392_389_363_067_063_5e6
                        + x * (-3.663_825_741_753_69e7
                            + x * (-6.148_431_948_622_697e7
                                + x * (3.042_169_037_744_613_4e7
                                    + x * 3.972_813_905_487_932e7)))))))
            / (1.
                + x * (507.405_256_285_233
                    + x * (46_852.747_159_777_88
                        + x * (1.316_830_464_009_143_6e6
                            + x * (1.311_169_069_371_241_5e7
                                + x * (4.614_211_644_525_801_4e7
                                    + x * (4.898_226_895_620_883e7
                                        + x * 9.195_910_098_798_385e6))))))))
    } else if z <= -0.017_105_334_740_676_01 {
        // W >= -5.832, Y_-3
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-11.038_489_462_297_466
            + x * (-15_575.812_882_656_619
                + x * (-4.249_294_730_489_777e6
                    + x * (-3.517_024_593_880_342e8
                        + x * (-9.865_916_303_661_137e9
                            + x * (-8.619_537_230_330_501e10
                                + x * (-1.328_633_557_402_761_5e11
                                    + x * 1.598_954_643_442_066e11)))))))
            / (1.
                + x * (1_837.077_069_301_716_6
                    + x * (612_840.975_855_951
                        + x * (6.214_918_139_846_548_4e7
                            + x * (2.230_401_131_444_308_3e9
                                + x * (2.825_423_248_527_369_7e10
                                    + x * (1.077_086_663_954_315_6e11
                                        + x * 7.196_469_887_604_913e10))))))))
    } else if z <= -0.004_595_496_212_794_371 {
        // W >= -7.382, Y_-4
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-12.474_405_916_395_746
            + x * (-68_180.335_575_543_78
                + x * (-7.184_659_984_562_01e7
                    + x * (-2.314_268_822_175_918_2e10
                        + x * (-2.580_137_833_794_529_3e12
                            + x * (-9.518_274_816_138_631e13
                                + x * (-8.607_325_098_621_033e14
                                    + x * 1.404_194_185_333_996_1e14)))))))
            / (1.
                + x * (6_852.581_373_443_11
                    + x * (8.515_300_102_546_655e6
                        + x * (3.214_602_823_968_569_3e9
                            + x * (4.292_980_741_745_32e11
                                + x * (2.023_438_116_163_808_6e13
                                    + x * (2.869_993_326_823_392_5e14
                                        + x * 7.121_013_665_152_548e14))))))))
    } else if z <= -0.001_200_161_067_219_772_4 {
        // W >= -8.913, Y_-5
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-13.921_651_376_890_072
            + x * (-298_789.564_823_880_7
                + x * (-1.231_301_993_732_209_2e9
                    + x * (-1.555_614_908_189_951e12
                        + x * (-6.868_534_110_677_271e14
                            + x * (-1.029_061_627_593_326_7e17
                                + x * (-4.140_468_370_161_965e18
                                    + x * (-1.442_330_999_800_636_8e19))))))))
            / (1.
                + x * (26_154.955_236_499_143
                    + x * (1.239_308_727_744_204_1e8
                        + x * (1.783_292_270_247_076e11
                            + x * (9.077_260_816_381_084e13
                                + x * (1.631_473_474_005_425_2e16
                                    + x * (8.837_132_386_123_351e17
                                        + x * 8.416_662_064_338_502e18))))))))
    } else if z <= -0.000_307_288_059_321_915 {
        // W >= -10.433, Y_-6
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-15.377_894_224_591_557
            + x * (-1.312_231_200_509_698e6
                + x * (-2.140_815_702_211_173_6e10
                    + x * (-1.071_828_743_155_781_3e14
                        + x * (-1.884_935_352_402_773_4e17
                            + x * (-1.139_485_860_730_931_1e20
                                + x * (-1.926_155_508_872_914_4e22
                                    + x * (-3.997_845_208_667_69e23))))))))
            / (1.
                + x * (101_712.867_717_606_2
                    + x * (1.872_854_594_505_038e9
                        + x * (1.046_961_741_666_440_2e13
                            + x * (2.070_434_906_012_044_4e16
                                + x * (1.446_490_790_238_607_4e19
                                    + x * (3.051_043_220_560_890_3e21
                                        + x * 1.139_758_913_979_073_9e23))))))))
    } else if z <= -0.000_077_447_159_838_062_18 {
        // W >= -11.946, Y_-7
        let x = -z / (X0 + (z - Z0).sqrt());
        Ok((-16.841_701_411_264_98
            + x * (-5.779_082_325_757_714e6
                + x * (-3.775_723_079_125_64e11
                    + x * (-7.571_213_374_258_986e15
                        + x * (-5.347_933_891_601_147e19
                            + x * (-1.308_271_173_229_786_5e23
                                + x * (-9.146_277_700_452_142e25
                                    + x * (-8.960_276_811_926_363e27))))))))
            / (1.
                + x * (401_820.466_662_307_27
                    + x * (2.921_151_813_690_049_4e10
                        + x * (6.445_613_537_341_029e14
                            + x * (5.031_180_957_649_953e18
                                + x * (1.387_904_123_971_628_9e22
                                    + x * (1.157_514_616_751_351_5e25
                                        + x * 1.719_922_018_594_775_7e27))))))))
    } else if z <= -4.580_811_969_815_817_5e-17 {
        // W >= -41.344, V_-8
        let u = (-z).ln();
        Ok((-2.083_626_038_401_644
            + u * (1.612_243_624_227_149_6
                + u * (5.446_426_495_963_720_5
                    + u * (-3.088_633_112_831_716
                        + u * (0.461_078_291_553_701_4
                            + u * (-0.023_553_839_118_456_38
                                + u * (0.000_405_389_041_702_534_04
                                    + u * (-1.794_815_692_251_682_6e-6))))))))
            / (1.
                + u * (2.369_964_891_270_301_5
                    + u * (-2.124_944_970_740_481_5
                        + u * (0.384_809_800_985_884_85
                            + u * (-0.021_720_009_380_176_607
                                + u * (0.000_394_058_628_906_086_36
                                    + u * (-1.790_931_206_686_595_8e-6
                                        + u * 3.115_367_330_813_367e-12))))))))
    } else if z <= -6.107_367_223_659_479e-79 {
        // W >= -185.316, V_-9
        let u = (-z).ln();
        Ok((0.160_453_837_665_705_42
            + u * (2.221_418_252_446_151_4
                + u * (-0.941_196_624_920_508_9
                    + u * (0.091_921_523_818_747_87
                        + u * (-0.002_906_976_053_317_166
                            + u * (0.000_032_707_247_990_255_96
                                + u * (-1.248_667_233_688_989_2e-7
                                    + u * 1.224_743_827_986_178_6e-10)))))))
            / (1.
                + u * (-0.702_549_960_878_703_4
                    + u * (0.080_974_347_786_703_19
                        + u * (-0.002_746_985_002_956_315_3
                            + u * (0.000_031_943_362_385_183_66
                                + u * (-1.239_062_068_732_166_7e-7
                                    + u * (1.224_163_611_516_82e-10
                                        + u * (-1.027_571_802_054_676_6e-17)))))))))
    } else if z < 0.0 {
        // V_-10
        let u = (-z).ln();
        Ok((-1.274_217_970_307_544
            + u * (1.369_665_880_542_138_4
                + u * (-0.125_193_453_875_587_83
                    + u * (0.002_515_572_246_076_384_3
                        + u * (-0.000_015_748_033_750_499_976
                            + u * (3.431_608_538_691_379e-8
                                + u * (-2.502_524_288_534_043_7e-11
                                    + u * 4.642_388_501_409_958e-15)))))))
            / (1.
                + u * (-0.114_200_064_741_524_65
                    + u * (0.002_428_523_383_212_26
                        + u * (-0.000_015_520_907_512_751_72
                            + u * (3.412_053_476_039_600_4e-8
                                + u * (-2.498_105_618_645_027_4e-11
                                    + u * (4.641_976_809_305_971e-15
                                        + u * (-1.360_871_393_694_260_3e-23)))))))))
    } else {
        Err(LambertWm1Error::new(
            LambertWm1ErrorReason::PositiveArgument,
        ))
    }
}

#[cfg(test)]
mod tets {
    use super::{lambert_w0_24, lambert_w0_50, lambert_wm1_50};
    use approx::assert_abs_diff_eq;

    #[test]
    fn test_lambert_w0_50() {
        assert_abs_diff_eq!(
            lambert_w0_50(-2.678794411714424e-01).unwrap(),
            -3.993824525397807e-01
        );
        assert_abs_diff_eq!(
            lambert_w0_50(6.321205588285577e-01).unwrap(),
            4.167039988177658e-01
        );
        assert_abs_diff_eq!(lambert_w0_50(9.632120558828557).unwrap(), 1.721757710976171);
        assert_abs_diff_eq!(
            lambert_w0_50(9.963212055882856e+01).unwrap(),
            3.382785211058958
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.996321205588285e+02).unwrap(),
            5.249293782013269
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999632120558828e+03).unwrap(),
            7.231813718542178,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999963212055883e+04).unwrap(),
            9.284568107521959
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999996321205589e+05).unwrap(),
            1.138335774796812e+01
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999999632120559e+06).unwrap(),
            1.351434397605273e+01
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999999963212056e+07).unwrap(),
            1.566899671199287e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999999996321206e+08).unwrap(),
            1.784172596707312e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999999999632120e+09).unwrap(),
            2.002868541326992e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999999999963213e+10).unwrap(),
            2.222712273495755e+01
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999999999996321e+11).unwrap(),
            2.443500440493456e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999999999999633e+12).unwrap(),
            2.665078750870219e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999999999999962e+13).unwrap(),
            2.887327487929930e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_w0_50(9.999999999999996e+14).unwrap(),
            3.110151971159478e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_w0_50(1.000000000000000e+16).unwrap(),
            3.333476076844818e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_w0_50(1.000000000000000e+17).unwrap(),
            3.557237716651325e+01
        );
        assert_abs_diff_eq!(
            lambert_w0_50(1.000000000000000e+18).unwrap(),
            3.781385607558877e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_w0_50(1.000000000000000e+19).unwrap(),
            4.005876916198432e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_w0_50(1.000000000000000e+20).unwrap(),
            4.230675509173839e+01
        );
        assert_abs_diff_eq!(
            lambert_w0_50(1.000000000000000e+40).unwrap(),
            8.763027715194720e+01
        );
        assert_abs_diff_eq!(
            lambert_w0_50(1.000000000000000e+80).unwrap(),
            1.790193137415062e+02,
            epsilon = 1e-13
        );
        assert_abs_diff_eq!(
            lambert_w0_50(1.000000000000000e+120).unwrap(),
            2.707091661024979e+02,
            epsilon = 1e-13
        );
        assert_abs_diff_eq!(
            lambert_w0_50(1.000000000000000e+160).unwrap(),
            3.625205337614976e+02
        );
    }

    #[test]
    fn test_lambert_w0_24() {
        assert_abs_diff_eq!(
            lambert_w0_24(-2.678794411714424e-01).unwrap(),
            -3.993824525397807e-01,
            epsilon = 1e-7
        );
        assert_abs_diff_eq!(
            lambert_w0_24(6.321205588285577e-01).unwrap(),
            4.167039988177658e-01,
            epsilon = 1e-7
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.632120558828557).unwrap(),
            1.721757710976171,
            epsilon = 1e-7
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.963212055882856e+01).unwrap(),
            3.382785211058958,
            epsilon = 1e-7
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.996321205588285e+02).unwrap(),
            5.249293782013269,
            epsilon = 1e-6
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999632120558828e+03).unwrap(),
            7.231813718542178,
            epsilon = 1e-7
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999963212055883e+04).unwrap(),
            9.284568107521959,
            epsilon = 1e-6
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999996321205589e+05).unwrap(),
            1.138335774796812e+01,
            epsilon = 1e-8
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999999632120559e+06).unwrap(),
            1.351434397605273e+01,
            epsilon = 1e-6
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999999963212056e+07).unwrap(),
            1.566899671199287e+01,
            epsilon = 1e-6
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999999996321206e+08).unwrap(),
            1.784172596707312e+01,
            epsilon = 1e-6
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999999999632120e+09).unwrap(),
            2.002868541326992e+01,
            epsilon = 1e-6
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999999999963213e+10).unwrap(),
            2.222712273495755e+01,
            epsilon = 1e-6
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999999999996321e+11).unwrap(),
            2.443500440493456e+01,
            epsilon = 1e-5
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999999999999633e+12).unwrap(),
            2.665078750870219e+01,
            epsilon = 1e-6
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999999999999962e+13).unwrap(),
            2.887327487929930e+01,
            epsilon = 1e-6
        );
        assert_abs_diff_eq!(
            lambert_w0_24(9.999999999999996e+14).unwrap(),
            3.110151971159478e+01,
            epsilon = 1e-5
        );
        assert_abs_diff_eq!(
            lambert_w0_24(1.000000000000000e+16).unwrap(),
            3.333476076844818e+01,
            epsilon = 1e-6
        );
        assert_abs_diff_eq!(
            lambert_w0_24(1.000000000000000e+17).unwrap(),
            3.557237716651325e+01,
            epsilon = 1e-5
        );
        assert_abs_diff_eq!(
            lambert_w0_24(1.000000000000000e+18).unwrap(),
            3.781385607558877e+01,
            epsilon = 1e-5
        );
        assert_abs_diff_eq!(
            lambert_w0_24(1.000000000000000e+19).unwrap(),
            4.005876916198432e+01,
            epsilon = 1e-6
        );
        assert_abs_diff_eq!(
            lambert_w0_24(1.000000000000000e+20).unwrap(),
            4.230675509173839e+01,
            epsilon = 1e-5
        );
        assert_abs_diff_eq!(
            lambert_w0_24(1.000000000000000e+40).unwrap(),
            8.763027715194720e+01,
            epsilon = 1e-5
        );
        assert_abs_diff_eq!(
            lambert_w0_24(1.000000000000000e+80).unwrap(),
            1.790193137415062e+02,
            epsilon = 1e-5
        );
        assert_abs_diff_eq!(
            lambert_w0_24(1.000000000000000e+120).unwrap(),
            2.707091661024979e+02,
            epsilon = 1e-4
        );
        assert_abs_diff_eq!(
            lambert_w0_24(1.000000000000000e+160).unwrap(),
            3.625205337614976e+02,
            epsilon = 1e-4
        );
    }

    #[test]
    fn test_lambert_wm1_50() {
        assert_abs_diff_eq!(
            lambert_wm1_50(-3.578794411714423e-01).unwrap(),
            -1.253493791367214,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-2.678794411714424e-01).unwrap(),
            -2.020625228775403,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-1.000000000000000e-01).unwrap(),
            -3.577152063957297
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-3.000000000000000e-02).unwrap(),
            -5.144482721515681
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-1.000000000000000e-02).unwrap(),
            -6.472775124394005,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-3.000000000000000e-03).unwrap(),
            -7.872521380098709,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-1.000000000000000e-03).unwrap(),
            -9.118006470402742,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-3.000000000000001e-04).unwrap(),
            -1.045921112040100e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-1.000000000000000e-04).unwrap(),
            -1.166711453256636e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-3.000000000000000e-05).unwrap(),
            -1.297753279184081e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-1.000000000000000e-05).unwrap(),
            -1.416360081581018e+01,
            epsilon = 1e-14
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-1.000000000000004e-75).unwrap(),
            -1.778749628219512e+02,
            epsilon = 1e-13
        );
        assert_abs_diff_eq!(
            lambert_wm1_50(-1.000000000000008e-145).unwrap(),
            -3.397029099254290e+02
        );
    }
}
