[package]
name = "lambert_w"
version = "0.5.2"
edition = "2021"
authors = ["Johanna Sörngård <jsorngard@gmail.com>"]
categories = ["mathematics"]
keywords = ["lambert_w", "product_log", "omega_function"]
description = "Fast and accurate evaluation of the Lambert W function by the method of T. Fukushima."
rust-version = "1.60.0"
license = "MIT OR Apache-2.0"
repository = "https://github.com/JSorngard/lambert_w"

[dependencies]
fast_polynomial = { version = "0.3.0", default-features = false, optional = true }
libm = { version = "0.2.8", optional = true }

[dev-dependencies]
approx = "0.5.1"
criterion = { version = "0.5.1", features = ["html_reports"] }
rand = "0.8.5"
rand_pcg = "0.3.1"

[features]
default = ["24bits", "50bits", "libm"]
# Enables the more accurate function versions with 50 bits of accuracy.
50bits = []
# Enables the faster function versions with 24 bits of accuracy.
24bits = []
# Uses [Estrin's scheme](https://en.wikipedia.org/wiki/Estrin's_scheme) to evaluate the polynomials in the rational functions.
# While this results in more assembly instructions, they are mostly independent of each other, 
# and this increases instruction level parallelism on modern hardware for a total performance gain.
# May result in slight numerical instability, which can be reduced if the target CPU has fused multiply-add instructions.
estrin = ["dep:fast_polynomial"]
# If the `std` feature is disabled, this feature uses the [`libm`](https://crates.io/crates/libm) crate
# to compute square roots and logarithms instead of the standard library.
libm = ["dep:libm", "fast_polynomial?/libm"]
# Use the standard library to compute square roots and logarithms for a potential performance gain.
# When this feature is disabled the crate is `no_std`.
std = ["fast_polynomial?/std"]

[package.metadata.docs.rs]
# Document all features.
all-features = true

[profile.release-lto]
inherits = "release"
lto = "fat"
codegen-units = 1

[[bench]]
name = "random"
harness = false

[[bench]]
name = "fixed"
harness = false