name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - name: Format
      run: cargo fmt --check

  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Check with `libm`
      run: cargo check --no-default-features -F libm
    - name: Check with `std`
      run: cargo check --no-default-features -F std
    - name: Check with both
      run: cargo check --no-default-features -F libm,std

  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - name: Run clippy with `libm`
      run: cargo clippy --no-default-features --features libm -- -D warnings
    - name: Run clippy with `std`
      run: cargo clippy --no-default-features --features std -- -D warnings
    - name: Run clippy with both
      run: cargo clippy --no-default-features --features libm,std -- -D warnings
      
  test:
    strategy:
      matrix:
        toolchain: [stable, beta]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}
    - name: Update apt package lists
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update
    - name: Install libfontconfig1-dev
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get -y install libfontconfig1-dev jq
    - name: Test with `libm`
      run: cargo test --no-default-features -F libm
    - name: Test with `std`
      run: cargo test --no-default-features -F std
    - name: Test with both
      run: cargo test --no-default-features -F libm,std
      
  doc:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUSTDOCFLAGS: --cfg docsrs
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - name: Generate documentation
      run: cargo +nightly doc --all-features

  verify_rust_version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-msrv
    - name: Verify MSRV with `libm`
      run: cargo msrv verify
    - name: Verify MSRV with `std`
      run: cargo msrv verify --no-default-features --features std
    - name: Verify MSRV with both
      run: cargo msrv verify --no-default-features --features libm,std

  run_examples:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Update apt package lists
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update
    - name: Install libfontconfig1-dev
      run: sudo apt-get -y install libfontconfig1-dev jq
    - name: Run plot example with `libm`
      run: cargo run --example plot
    - name: Run plot example with `std`
      run: cargo run --example plot --no-default-features --features std
    - name: Run plot example with both
      run: cargo run --example plot --no-default-features --features libm,std

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: Update apt package lists
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update 
      - name: Install libfontconfig1-dev
        run: sudo apt-get -y install libfontconfig1-dev jq
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: Create coverage report
        run: cargo llvm-cov --locked --all-features --lcov --output-path lcov.info
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          fail_ci_if_error: true

  semver-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-semver-checks
      - name: Verify semver compatibility with `libm`
        run: cargo semver-checks
      - name: Verify semver compatibility with `std`
        run: cargo semver-checks --only-explicit-features --features std
      - name: Verify semver compatibility with both
        run: cargo semver-checks --only-explicit-features --features libm,std

  compile_benchmarks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Update apt package lists
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update
    - name: Install libfontconfig1-dev
      run: sudo apt-get -y install libfontconfig1-dev jq
    - name: Compile benchmarks with `libm`, but do not run them
      # There are no benchmarks with "nothing" in their name, hence this command only compiles the benchmarks but does not run them.
      run: cargo bench nothing
    - name: Compile benchmarks with `std`, but do not run them
      run: cargo bench --no-default-features --features std nothing
    - name: Compile benchmarks with both features, but do not run them
      run: cargo bench --no-default-features --features libm,std nothing

  ensure_no_panics:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-all-features
    - name: Update apt package lists
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update
    - name: Install libfontconfig1-dev
      run: sudo apt-get -y install libfontconfig1-dev jq
    - name: Set up the environment variable
      run: echo "LAMBERT_W_ENSURE_NO_PANICS=1" >> $GITHUB_ENV
    - name: Check the crate for panics
      run: cargo test-all-features --profile release-lto

  no_std:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [thumbv7m-none-eabi, aarch64-unknown-none]
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}
    - name: Check
      run: cargo check --target ${{ matrix.target }}
    - name: Build
      run: cargo build --target ${{ matrix.target }}

  minimal_dependencies:
    # This action chooses the oldest version of the dependencies permitted by Cargo.toml to ensure
    # that this crate is compatible with the minimal version that this crate and its dependencies
    # require. This will pickup issues where this create relies on functionality that was introduced
    # later than the actual version specified (e.g., when we choose just a major version, but a
    # method was added after this version).
    #
    # This particular check can be difficult to get to succeed as often transitive dependencies may
    # be incorrectly specified (e.g., a dependency specifies 1.0 but really requires 1.1.5). There
    # is an alternative flag available -Zdirect-minimal-versions that uses the minimal versions for
    # direct dependencies of this crate, while selecting the maximal versions for the transitive
    # dependencies. Alternatively, you can add a line in your Cargo.toml to artificially increase
    # the minimal dependency, which you do with e.g.:
    # ```toml
    # # for minimal-versions
    # [target.'cfg(any())'.dependencies]
    # openssl = { version = "0.10.55", optional = true } # needed to allow foo to build with -Zminimal-versions
    # ```
    # The optional = true is necessary in case that dependency isn't otherwise transitively required
    # by your library, and the target bit is so that this dependency edge never actually affects
    # Cargo build order. See also
    # https://github.com/jonhoo/fantoccini/blob/fde336472b712bc7ebf5b4e772023a7ba71b2262/Cargo.toml#L47-L49.
    # This action is run on ubuntu with the stable toolchain, as it is not expected to fail
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: dtolnay/rust-toolchain@nightly
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-all-features
      - name: Set stable Rust as the default
        run: rustup default stable
      - name: Use minimal versions of dependencies
        run: cargo +nightly update -Zminimal-versions
      - name: Check all feature combinations
        run: cargo check-all-features --locked
