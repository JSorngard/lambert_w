name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - name: Format
      run: cargo fmt --check

  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-all-features
    - name: Check all feature combinations
      run: cargo check-all-features

  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - name: Run clippy with `libm`
      run: cargo clippy --no-default-features --features libm -- -D warnings
    - name: Run clippy with `std`
      run: cargo clippy --no-default-features --features std -- -D warnings
    - name: Run clippy with both
      run: cargo clippy --no-default-features --features libm,std -- -D warnings
      
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, beta]
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-all-features
    - name: Install libfontconfig1-dev
      run: sudo apt-get -y install libfontconfig1-dev jq
    - name: Test all feature combinations
      run: cargo test-all-features
      
  doc:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUSTDOCFLAGS: --cfg docsrs
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - name: Generate documentation
      run: cargo +nightly doc --all-features --no-deps

  verify_rust_version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-msrv
    - name: Verify MSRV with `libm`
      run: cargo msrv --output-format minimal verify
    - name: Verify MSRV with `std`
      run: cargo msrv --output-format minimal verify --no-default-features --features std
    - name: Verify MSRV with both
      run: cargo msrv --output-format minimal verify --no-default-features --features libm,std

  run_examples:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install libfontconfig1-dev
      run: sudo apt-get -y install libfontconfig1-dev jq
    - name: Run plot example with `libm`
      run: cargo run --example plot
    - name: Run plot example with `std`
      run: cargo run --example plot --no-default-features --features std
    - name: Run plot example with both
      run: cargo run --example plot --no-default-features --features libm,std

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: Install libfontconfig1-dev
        run: sudo apt-get -y install libfontconfig1-dev jq
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: Create coverage report
        run: cargo llvm-cov --locked --all-features --lcov --output-path lcov.info
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          fail_ci_if_error: true

  semver-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-semver-checks
      - name: Verify semver compatibility with `libm`
        run: cargo semver-checks
      - name: Verify semver compatibility with `std`
        run: cargo semver-checks --only-explicit-features --features std
      - name: Verify semver compatibility with both
        run: cargo semver-checks --only-explicit-features --features libm,std

  bench:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install libfontconfig1-dev
      run: sudo apt-get -y install libfontconfig1-dev jq
    - name: Compile benchmarks with `libm`, but do not run them
      # There are no benchmarks with "nothing" in their name, hence this command only compiles the benchmarks but does not run them.
      run: cargo bench nothing
    - name: Compile benchmarks with `std`, but do not run them
      run: cargo bench --no-default-features --features std nothing
    - name: Compile benchmarks with both features, but do not run them
      run: cargo bench --no-default-features --features libm,std nothing

  ensure_no_panics:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-all-features
    - name: Install libfontconfig1-dev
      run: sudo apt-get -y install libfontconfig1-dev jq
    - name: Set up the environment variable
      run: echo "LAMBERT_W_ENSURE_NO_PANICS=1" >> $GITHUB_ENV
    - name: Check the crate for panics
      run: cargo test-all-features --profile release-lto

  no_std:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [thumbv7m-none-eabi, aarch64-unknown-none]
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}
    - name: Check
      run: cargo check --target ${{ matrix.target }}
    - name: Build
      run: cargo build --target ${{ matrix.target }}
